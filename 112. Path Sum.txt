/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if (root == NULL) return false;
        
        if (root->val == targetSum && root->left == root->right) return true;
        
        return hasPathSum(root->left, targetSum-root->val) || hasPathSum(root->right, targetSum-root->val);
    }
};

C++ Using Stack:

class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        stack<pair<TreeNode*, int>> stk;
        
        if (root == nullptr) return false;
        stk.push({root, 0});
        
        while(!stk.empty()){
            auto [curr, sum] = stk.top(); stk.pop();
            sum += curr->val;
            
            if (sum == targetSum && curr->left == curr->right) return true;
            
            if (curr->left != nullptr) stk.push({curr->left, sum});
            
            if (curr->right != nullptr) stk.push({curr->right, sum});
        }
        
        return false;
    }
};

Python 3: 


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        if not root: return False
        
        def dfs(node, total):
            if not node:
                return False
            
            if not node.left and not node.right:
                return total+node.val == targetSum
            
            return dfs(node.left, total + node.val) or dfs(node.right, total + node.val)
        
        return dfs(root, 0)
        