Approach 2: Sorted Map + Binary Search:

class TimeMap {
public:
    unordered_map<string, map<int, string>> keyTimeMap;
    TimeMap() {
    }
    
    void set(string key, string value, int timestamp) {
        keyTimeMap[key][timestamp] = value;
    }
    
    string get(string key, int timestamp) {
        if (keyTimeMap.find(key) == keyTimeMap.end()) return "";
        
        auto it = keyTimeMap[key].upper_bound(timestamp);
        
        if (it == keyTimeMap[key].begin()) return "";
        
        return prev(it)->second;
    }
};


Approach 3: Array + Binary Search:

class TimeMap {
public:
    unordered_map<string, vector<pair<int, string>>> keyTimeMap;
    TimeMap() {
    }
    
    void set(string key, string value, int timestamp) {
        keyTimeMap[key].push_back({timestamp, value});
    }
    
    string get(string key, int timestamp) {
        if (keyTimeMap.find(key) == keyTimeMap.end()) return "";
        
        if (timestamp < keyTimeMap[key][0].first) return "";
        
        int left = 0, right = keyTimeMap[key].size();
        
        while (left < right){
            int mid = (left+right)/2;
            if (keyTimeMap[key][mid].first <= timestamp){
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        
        if (right == 0) return "";
        
        return keyTimeMap[key][right-1].second;
    }
};