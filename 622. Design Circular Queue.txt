// Time Complexity: O(1)
// Space Complexity: O(N)
class MyCircularQueue {
private:
    vector<int> q;
    int sz, cnt, headIdx;
    
public:
    MyCircularQueue(int k) {
        headIdx = 0;
        cnt = 0;
        sz = k;
        q.resize(k);
    }
    
    bool enQueue(int value) {
        if (isFull()) return false;
        
        q[(headIdx+cnt)%sz] = value;
        cnt++;
        return true;
    }
    
    bool deQueue() {
        if (isEmpty()) return false;
        
        headIdx = (headIdx + 1) % sz;
        cnt--;
        return true;
    }
    
    int Front() {
        if (isEmpty()) return -1;
        return q[headIdx];
    }
    
    int Rear() {
        if (isEmpty()) return -1;
        return q[(headIdx+cnt-1)%sz];
    }
    
    bool isEmpty() {
        return cnt == 0;
    }
    
    bool isFull() {
        return cnt == sz;
    }
};
