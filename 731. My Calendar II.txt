class MyCalendarTwo {
public:
    set<pair<int, int>> overlaps, calendar;
    MyCalendarTwo() {
        
    }
    
    bool book(int start, int end) {
        for (auto x: overlaps){
            if (start < x.second && x.first < end) return false;
        }
        
        for (auto x: calendar){
            if (start < x.second && x.first < end) overlaps.insert({max(x.first, start), min(x.second, end)});
        }
        calendar.insert({start, end});
        return true;
    }
};



class MyCalendarTwo {
public:
    
    map<int, int> diff;
    MyCalendarTwo() {
        
    }
    
    bool book(int start, int end) {
        int curr=0, res=0;
        diff[start]++;
        diff[end]--;
        
        for (auto [_, x]: diff){
            curr += x;
            res = max(res, curr);
        }
        
        if (res >= 3){
            diff[start]--;
            diff[end]++;
            return false;
        }
        
        return true;
    }
};
