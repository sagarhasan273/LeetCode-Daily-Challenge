Approch 01 :-> Python 3:

class StockSpanner:

    def __init__(self):
        self.stock = []
        self.stack = []

    def next(self, price: int) -> int:
        

        while self.stack and self.stack[-1][0] <= price:
            self.stack.pop()
            
        self.stock.append(price)

        if not self.stack:
            self.stack.append((price, len(self.stock)))
            return len(self.stock)
        
        count = len(self.stock) - self.stack[-1][1]
        
        self.stack.append((price, len(self.stock)))
        
        return count


Approch 02 :-> Python 3:

class StockSpanner:

    def __init__(self):
        self.stack = []
        self.size = 0

    def next(self, price: int) -> int:
        while self.stack and self.stack[-1][0] <= price:
            self.stack.pop()
            
        self.size += 1

        if not self.stack:
            self.stack.append((price, self.size))
            return self.size
        
        count = self.size - self.stack[-1][1]
        self.stack.append((price, self.size))
        return count


Approch 03 C++:

class StockSpanner {
public:
    stack<pair<int, int>> stack;
    StockSpanner() {
        
    }
    
    int next(int price) {
        int count = 1;
        
        while (!stack.empty() && stack.top().first <= price){
            count += stack.top().second;
            stack.pop();
        }
        
        stack.push({price, count});
        
        return count;
    }
};