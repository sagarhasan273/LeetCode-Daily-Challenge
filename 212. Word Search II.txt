Python Time Limit Exceeded:

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:	
	rows = len(board)
        cols = len(board[0])
        
        def dfs(r, c, i, l):
            if i == l:
                return True
            
            if (r, c) in visited or r not in range(rows) or c not in range(cols) or board[r][c] != word[i]:
                return False
            visited.add((r, c))
            
            down = dfs(r+1, c, i+1, l)
            up = dfs(r-1, c, i+1, l)
            left = dfs(r, c+1, i+1, l) 
            right = dfs(r, c-1, i+1, l)
            
            visited.remove((r, c))
            
            return down or up or left or right
        
        res = []
        
        for word in words:
            flag = False
            
            for r in range(rows):
                for c in range(cols):
                    if word[0] == board[r][c]:
                        visited = set()
                        if dfs(r, c, 0, len(word)):
                            res.append(word)
                            flag = True
                            break
                if flag:
                    break
        
        return res


Python Trie:

class TrieNode:
    def __init__(self):
        self.children = {}
        self.isWord = False
        self.refs = 0
    
    def addWord(self, word):
        curr = self
        curr.refs +=  1
        for w in word:
            if w not in curr.children:
                curr.children[w] = TrieNode()
            curr = curr.children[w]
            curr.refs +=  1
        
        curr.isWord = True
    
    def removeWord(self, word):
        cur = self
        cur.refs -= 1
        for c in word:
            if c in cur.children:
                cur = cur.children[c]
                cur.refs -= 1


class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        root = TrieNode()
        
        for word in words:
            root.addWord(word)
        
        rows, cols = len(board), len(board[0])
        visit, res = set(), set()
        
        def dfs(r, c, node, word):
            if r < 0 or c < 0 or r == rows or c == cols or (r, c) in visit or board[r][c] not in node.children or node.children[board[r][c]].refs < 1:
                return
            
            visit.add((r, c))
            node = node.children[board[r][c]]
            word += board[r][c]
            if node.isWord:
                node.isWord = False
                res.add(word)
                root.removeWord(word)
                
            dfs(r+1, c, node, word)
            dfs(r-1, c, node, word)
            dfs(r, c+1, node, word)
            dfs(r, c-1, node, word)
            visit.remove((r, c))
        
        for r in range(rows):
            for c in range(cols):
                dfs(r, c, root, "")
        
        return list(res)
