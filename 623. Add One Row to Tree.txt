C++ Solution:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* node, int value, int depth){
        if (depth == 1){
            TreeNode* left = node->left;
            TreeNode* right = node->right;
            
            TreeNode* newl = new TreeNode(value);
            TreeNode* newr = new TreeNode(value);
            
            node->left = newl;
            node->right = newr;
            
            newl->left = left;
            newr->right = right;
            return;
        }
        
        if (node->left) dfs(node->left, value, depth-1);
        if (node->right) dfs(node->right, value, depth-1);
    }
    
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if (!root) return root;
        if (depth == 1){
            TreeNode* newNode = new TreeNode(val);
            newNode->left =root;
            return newNode;
        }
        
        dfs(root, val, depth-1);
        
        return root;
    }
};